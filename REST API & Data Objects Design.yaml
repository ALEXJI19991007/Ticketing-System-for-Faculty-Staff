openapi: 3.0.1
info:
  title: Ticketing System for Faculty & Staff (TSFS)
  description: Data objects & REST endpoints for TSFS application.
  version: 1.0.0
  
servers:
- url: https://localhost:8080/api/v1

tags:
- name: user
  description: Everything about user creation, authentication, .etc
- name: ticket
  description: Everything about ticket creation & modification.

paths:
  /user:
    post:
      tags:
      - user
      summary: Create a new user
      description: The service will return the user created, in JSON format, including the newly generated ID.
      operationId: createUser
      requestBody:
        description: User object that needs to be added to the database. The ID field is irrelevant (and should be left empty for clarity), as will be generated by the server and returned. The watching_tickets, created_tickets and assigned_tickets fields are also empty at beginning.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        201:
          description: Successfully created a new user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Invalid input
          content: {}
      x-codegen-request-body-name: body
      

  /user/{userId}:
    get:
      tags:
      - user
      summary: Retrieve user by user ID
      operationId: getUserByUserId
      parameters:
      - name: userId
        in: path
        description: ID of the user that needs to be retrieved
        required: true
        schema:
          type: string
          format: uuid
      responses:
        200:
          description: User found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Bad request
          content: {}
        404:
          description: Contact not found
          content: {}
          
    put:
      tags:
      - user
      summary: Update an existing user by ID
      operationId: updateUserByUserId
      parameters:
      - name: userId
        in: path
        description: ID of the user that needs to be retrieved
        required: true
        schema:
          type: string
      requestBody:
        description: Updated user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        200:
          description: Successfully updated user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Invalid input
          content: {}
        404:
          description: User not found
          content: {}
      x-codegen-request-body-name: body
      
    delete:
      tags:
      - user
      summary: Delete an existing user by user ID
      operationId: deleteUserByUserId
      parameters:
      - name: userId
        in: path
        description: ID of the user that needs to be deleted
        required: true
        schema:
          type: string
      responses:
        200:
          description: Successfully deleted user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Bad request
          content: {}
        404:
          description: User not found
          content: {}
  
              
  /ticket:
    post:
      tags:
      - ticket
      summary: Create a new ticket
      description: The service will return the ticket created, in JSON format, including the newly generated ID.
      operationId: createTicket
      requestBody:
        description: Ticket object that needs to be added to the database. The ID field is irrelevant (and should be left empty for clarity), as will be generated by the server and returned. The creator field will be the uuid of the user that created it. The watchers and assignees field will be defaulted as empty arrays, and the status field is "created" at beginning.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Ticket'
        required: true
      responses:
        201:
          description: Successfully created new ticket
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ticket'
        400:
          description: Invalid input
          content: {}
      x-codegen-request-body-name: body
      
    get:
      tags:
      - ticket
      summary: Retrieve all tickets associated with a specific userId, with specific user-relationship(s), and under specific status(s).
      operationId: getTickets
      parameters:
      - in: query
        name: userId
        description: ID of the user whose tickets need to be retrieved
        required: true
        schema:
          type: string
          format: uuid
      - in: query
        name: relationship
        description: We want to retrieve tickets with this specific relationship to the user.
        required: true
        schema:
          type: array
          items:
            type: string
            enum: [created, watching, assigned]
      - in: query
        name: status
        description: We want to retrieve tickets under this specific status.
        required: true
        schema:
          type: array
          items:
            type: string
            enum: [Created, Assigned, Started, Blocked, Resolved]
      responses:
        200:
          description: Ticket found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ticket'
        400:
          description: Bad request
          content: {}
        404:
          description: Contact not found
          content: {}
          
    
  /ticket/{ticketId}:
    get:
      tags:
      - ticket
      summary: Retrieve ticket by ticket ID
      operationId: getTicketByTicketId
      parameters:
      - name: ticketId
        in: path
        description: ID of the ticket that needs to be retrieved
        required: true
        schema:
          type: string
          format: uuid
      responses:
        200:
          description: Ticket found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ticket'
        400:
          description: Bad request
          content: {}
        404:
          description: Ticket not found
          content: {}
          
    put:
      tags:
      - ticket
      summary: Update an existing ticket by ID
      operationId: updateTicketByTicketId
      parameters:
      - name: ticketId
        in: path
        description: ID of the ticket that needs to be retrieved
        required: true
        schema:
          type: string
      requestBody:
        description: Updated ticket
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Ticket'
        required: true
      responses:
        200:
          description: Successfully updated ticket
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ticket'
        400:
          description: Invalid input
          content: {}
        404:
          description: Ticket not found
          content: {}
      x-codegen-request-body-name: body
      
    delete:
      tags:
      - ticket
      summary: Delete an existing ticket by ticket ID
      operationId: deleteTicketByTicketId
      parameters:
      - name: ticketId
        in: path
        description: ID of the ticket that needs to be deleted
        required: true
        schema:
          type: string
      responses:
        200:
          description: Successfully deleted ticket
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ticket'
        400:
          description: Bad request
          content: {}
        404:
          description: Ticket not found
          content: {}
  
  
          
components:
  schemas:
    User:
      required: [firstname, lastname, identity, password, email]
      type: object
      properties:
        id:
          type: string
          format: uuid
        firstname:
          type: string
          example: Alex
        lastname:
          type: string
          example: Ji
        password:
          type: string
          format: password
          example: MakeGaTechGreatAgain
        identity:
          type: string
          enum: [faculty, staff]
        email:
          type: string
        created_tickets:
          type: array
          items:
            type: string
            format: uuid
        watching_tickets:
          type: array
          items:
            type: string
            format: uuid
        assigned_tickets:
          type: array
          items:
            type: string
            format: uuid
      
    Ticket:
      required: [title, ticket_type, creator]
      type: object
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
          example: Asking for 3-day PTO
        description:
          type: string
          example: I want to have a vacation in Cancun.
        ticket_type:
          type: string
          enum: [Travel Authorization, Reimbursement, Meeting Organization, Student Hiring, Proposals, Miscellanea]
        creator:
          type: string
          format: uuid
        watchers:
          type: array
          items:
            type: string
            format: uuid
        assignees:
          type: array
          items:
            type: string
            format: uuid
        status:
          type: string
          enum: [Created, Assigned, Started, Blocked, Resolved]
        comment:
          type: string
          example: "No comment."
          